[{"section":"Blog","slug":"/blog/wolfssltext/","title":"Encryption of Text file with wolfCrypt","description":"","date":"September 23, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/wolfSSLCover_hu5231295417995472875.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/wolfSSLCover_hu3003472458139720379.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/wolfSSLCover_hu5733191293348103817.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/wolfSSLCover_hu14733043352170037464.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Cryptography","tags":"","content":"Introduction: This tutorial guides you through installing and using wolfCrypt, a cryptographic library by wolfSSL, to encrypt a text file on a Windows machine. We\u0026rsquo;ll focus on the practical application rather than the underlying encryption and decryption mechanisms.\nPre-Requisites MSYS2 MINGW64 (https://www.msys2.org/) Eclipse IDE for Embedded C/C++ Developers Installation Download wolfSSL package from their website. https://www.wolfssl.com/download/ -\u0026gt; Download wolfssl-5.7.2.zip or any latest version. Extract the Archive: Extract the downloaded file to a directory of your choice. Navigate Using MSYS2 MINGW64: Open MSYS2 MINGW64 from your Start menu. Use the cd command to navigate to the folder where you extracted the downloaded archive (e.g., wolfssl-5.7.2). Here\u0026rsquo;s an example: cd C:/Programming/crypto/wolfssl-5.7.2 Compile and Install: Run the following commands in the MSYS2 MINGW64 terminal window: ./configure --enable-cryptonly make make install Explanation of the Commands:\n./configure --enable-cryptonly: This command configures the build process for wolfCrypt, enabling only the encryption functionalities. make: This command builds the wolfCrypt library. make install: This command installs the compiled library files to the appropriate system directories. Integration Now to itegrate the created wolfCrypt dynamic libraries to an Eclipse based C project, follow the below steps:\nCreate a New C/C++ Project: In Eclipse, select File \u0026gt; New \u0026gt; C/C++ Project. Choose the C Managed Build template, provide a project name like cryptTxt, select Empty Project, and choose MinGW GCC as the toolchain. Configure Project Properties: Right-click on the project, go to Properties, navigate to C/C++ Build \u0026gt; Settings, and in the Tool Settings tab under MinGW C Linker, go to Libraries. Library Search Path (-L): Add the directory containing the wolfCrypt DLL files. Libraries (-l): Add wolfssl to link against the wolfSSL library. Add Include Path: In the same Project Properties window, go to Paths and Symbols. Under GNU C, add the directory containing the wolfCrypt header files (e.g., C:\\msys64\\mingw64\\include). C:\\msys64\\mingw64\\include\\ Now the eclipse project is integrated with wolfCrypt.\nImplementation Create Files: Create a main.c file and an inputText.txt file within your project. Copy Code: Paste the relevant code from the specified Git repository into main.c. Build and Run: Right-click on the project, select Build Project, and then Run as Local C/C++ Program. This will encrypt the inputText.txt file and create an encrypted encrypted.txt file. Decrypt: To decrypt the file, modify line 5 of the code from #define ENCRYPT to #define DECRYPT. Rebuild and run again to create a decryptedTxt.txt file with the original data. Encryption Complete: The inputText.txt file has been successfully encrypted and saved as encrypted.txt.\nDecryption: To decrypt the encrypted file, follow these steps:\nModify the Code: In your main.c file, locate line 5 and change #define ENCRYPT to #define DECRYPT. This will switch the code from encryption mode to decryption mode. Rebuild and Run: Recompile the project and run it again. Check the Decrypted File: The decrypted data will be saved in a new file named decryptedTxt.txt. Open this file to verify that the original content has been restored. Info\nThis is a fundamental example of using wolfCrypt. wolfCrypt is designed for more complex applications, which we\u0026rsquo;ll explore in future blogs.\n"},{"section":"Blog","slug":"/blog/logicanalyzer/","title":"Logic Analyzer","description":"this is meta description","date":"September 22, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/logicAnalyzer/logicAnalyzer1_hu7605063706739470453.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/logicAnalyzer\\/logicAnalyzer1_hu1077896768915640660.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/logicAnalyzer/logicAnalyzer1_hu3765446253500243400.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/logicAnalyzer\\/logicAnalyzer1_hu3387212331286987241.jpg';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"Components","tags":"component","content":"Introduction: As an embedded engineer, a reliable logic analyzer is an essential tool for debugging and troubleshooting projects. While options like the Kingst Logic Analyzer offer excellent performance, they can be quite expensive. In this post, I\u0026rsquo;ll share my experience with a budget-friendly clone that I found on Amazon.\nProduct After searching online for more affordable alternatives, I came across a CY7C68013A-56-based logic analyzer on Amazon. Despite its low price, it has performed surprisingly well in my personal projects.\u0026quot;\nOne of the biggest advantages of this clone is its compatibility with popular logic analyzer software like Salae. Even though Salae\u0026rsquo;s official hardware is significantly more expensive, the free software works seamlessly with this budget-friendly option.\nGetting Started Download and install the Salae software. Connect the logic analyzer to your computer using the provided USB cable. The software should automatically detect the device. Troubleshooting Tip If you encounter issues with device detection, try the following:\nUnplug the analyzer. Uninstall any unknown devices from your Device Manager. Plug the analyzer back in. The drivers will be installed automatically. Info\nI\u0026rsquo;m currently exploring whether this clone is compatible with other popular logic analyzer software like SigRock Pulseview. I\u0026rsquo;ll update this post with my findings.\nConclusion Overall, I\u0026rsquo;ve been very pleased with the performance of this budget-friendly logic analyzer. It\u0026rsquo;s a great option for those who need a reliable tool without breaking the bank. If you\u0026rsquo;re looking for a cost-effective solution for your embedded projects, I highly recommend giving this clone a try.\n"}]